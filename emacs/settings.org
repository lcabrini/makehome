#+TITLE: Settings
#+AUTHOR: Lorenzo Cabrini
#+LANGUAGE: en
#+FILETAGS: :emacs:config:

* User interface
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (blink-cursor-mode 0)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;;(load-theme 'wheatgrass t)
  (use-package zenburn-theme
    :ensure t
    :init
    (load-theme 'zenburn t))
  (set-language-environment "UTF-8")
  (global-hl-line-mode t)
  (global-prettify-symbols-mode t) 
#+END_SRC
** DONE disable the menu bar
CLOSED: [2020-04-07 mar 22:15]
I will do this when I get comfortable enough with Emacs keybindings

* Fonts
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "DejaVu Sans Mono")
  (set-fontset-font t 'latin "Noto Sans")
  (set-fontset-font t 'chinese-gbk
                    (font-spec :family "Noto Sans CJK SC"))
  (set-fontset-font t 'japanese-jisx0213.2004-1
                    (font-spec :family "Noto Sans CJK JP"))
  (set-fontset-font t 'hangul
                    (font-spec :family "Noto Sans CJK KR"))
#+END_SRC
* Buffers and windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC
* Ansi term
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :config
    (progn
      ;; Copied and yanked from the Swiper doc for now.
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC
* Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC

* Powerline
#+BEGIN_SRC emacs-lisp
    (use-package powerline
      :ensure t)
    (powerline-default-theme)
#+END_SRC

** TODO show the (date and) time

* Org
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
  (setq org-agenda-files '("~/org"
                           "~/org/lang"
                           "~/.emacs.d/settings.org"))
  (setq org-log-done 'time)
  (setq org-todo-keywords
        '((sequence "TODO(t)"
                    "STARTED(s)"
                    "WAITING(w)"
                    "|"
                    "DONE(d)"
                    "CANCELLED(c)")))
#+END_SRC

** TODO should I add POSTPONED to the keywords?

** Org-drill
#+BEGIN_SRC emacs-lisp
  (use-package org-drill
    :ensure t)
  (setq org-drill-add-random-noise-to-intervals-p t)
  (setq org-drill-scope 'directory)
  (setq org-drill-learn-fraction 0.4)
  (setq org-drill-maximum-items-per-session 50)
  (setq org-drill-maximum-duration 30)
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (global-company-mode))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
  (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
#+END_SRC
* Programming
** Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure nil
    :hook
    ((python-mode . jedi:setup)))

  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode 1))

  (use-package company-jedi
    :ensure t
    :config
    (add-to-list 'company-backends 'company-jedi))

  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

*** TODO automaticall install required packages in virtual environment [0/4]
- [ ] flake8
- [ ] autopep8
- [ ] jedi (is this needed?)
- [ ] yapf
** Web-mode
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (".html?$")
    :config
    (setq
     web-mode-markup-indent-offset 2
     web-mode-css-indent-offset 2
     web-mode-code-indent-offset 2
     web-mode-enable-auto-closing t
     web-mode-enable-auto-opening t
     web-mode-enable-auto-indentation t))
#+end_src
* EMMS
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
    (progn
      (emms-standard)
      (emms-default-players)
      (setq emms-playlist-buffer-name "EMMS")
      (setq emms-source-file-default-directory "~/musica/")))

  (use-package org-emms
    :ensure t)
#+END_SRC
* Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t)
  (global-set-key (kbd "C-x w") 'elfeed)

  (use-package elfeed-org
    :ensure t
    :init
    (elfeed-org))
  (setq rmh-elfeed-org-files (list "~/org/feeds.org"))
#+END_SRC
* Matrix-client
#+begin_src emacs-lisp
  (use-package matrix-client
    :quelpa (matrix-client
             :fetcher github
             :repo "alphapapa/matrix-client.el"
             :files (:defaults "logo.png" "matrix-client-standalone.el.sh")))
#+end_src
* PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page))

  (use-package org-pdfview
    :ensure t)
#+end_src
* Pass
#+begin_src emacs-lisp
  (use-package pass
    :ensure t)
#+end_src
* Emacs Application Framework
Requires some out-of-emacs setup. I used =yay -S emacs-eaf=.
#+begin_src emacs-lisp
  (use-package eaf
    :load-path "/usr/share/emacs/site-lisp/eaf"
    :custom
    (eaf-find-alternate-file-in-dired t)
    :config
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key take_photo "p" eaf-camera-keybinding))
#+end_src
* TODO configuration [4/5]                                        :@computer:
- [X] set up fonts [3/3]
  - [X] Korean
  - [X] Japanese
  - [X] Chinese
- [X] keybindings to zoom in/zoom out
- [ ] follow links by hitting enter
- [X] don't ask which shell to run in =term=
- [X] install which-key package

